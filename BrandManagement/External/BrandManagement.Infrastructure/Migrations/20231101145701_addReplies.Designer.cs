// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SNM.BrandManagement.Infrastructure.DataContext;

#nullable disable

namespace SNM.BrandManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231101145701_addReplies")]
    partial class addReplies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ChannelProfileId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChannelTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("IsActivated")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.Property<string>("SocialAccessToken")
                        .HasColumnType("longtext");

                    b.Property<string>("SocialChannelId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChannelProfileId");

                    b.HasIndex("ChannelTypeId");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.ChannelProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccessToken")
                        .HasColumnType("longtext");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Headline")
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileLink")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshTokenExpiresIn")
                        .HasColumnType("longtext");

                    b.Property<string>("Scope")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<string>("expires_in")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ChannelProfile");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.ChannelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ChannelType");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("CommentId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FromId")
                        .HasColumnType("longtext");

                    b.Property<string>("FromName")
                        .HasColumnType("longtext");

                    b.Property<string>("FromPicture")
                        .HasColumnType("longtext");

                    b.Property<int?>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RepliesId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("RepliesId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("Media_type")
                        .HasColumnType("int");

                    b.Property<string>("Media_url")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Caption")
                        .HasColumnType("longtext");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PostClicks")
                        .HasColumnType("int");

                    b.Property<int?>("PostEngagedUsers")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TotalCountReactions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Reactions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FromUserId")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReactionId")
                        .HasColumnType("longtext");

                    b.Property<int?>("ReactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Channel", b =>
                {
                    b.HasOne("SNM.BrandManagement.Domain.Entities.Brand", "Brand")
                        .WithMany("SocialChannels")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNM.BrandManagement.Domain.Entities.ChannelProfile", "ChannelProfile")
                        .WithMany("Channel")
                        .HasForeignKey("ChannelProfileId");

                    b.HasOne("SNM.BrandManagement.Domain.Entities.ChannelType", "ChannelType")
                        .WithMany("Channels")
                        .HasForeignKey("ChannelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ChannelProfile");

                    b.Navigation("ChannelType");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Comment", b =>
                {
                    b.HasOne("SNM.BrandManagement.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("SNM.BrandManagement.Domain.Entities.Comment", "Reply")
                        .WithMany("Replies")
                        .HasForeignKey("RepliesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Post");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Media", b =>
                {
                    b.HasOne("SNM.BrandManagement.Domain.Entities.Post", "Post")
                        .WithMany("MediaData")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Reactions", b =>
                {
                    b.HasOne("SNM.BrandManagement.Domain.Entities.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Brand", b =>
                {
                    b.Navigation("SocialChannels");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.ChannelProfile", b =>
                {
                    b.Navigation("Channel");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.ChannelType", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("SNM.BrandManagement.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MediaData");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
