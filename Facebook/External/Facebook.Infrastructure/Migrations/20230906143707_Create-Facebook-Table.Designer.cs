// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SNS.Facebook.Infrastructure.DataContext;

#nullable disable

namespace SNS.Facebook.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230906143707_Create-Facebook-Table")]
    partial class CreateFacebookTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CoverPhoto")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChannelTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChannelTypeId");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.ChannelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ChannelType");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.FacebookChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ChannelAPI")
                        .HasColumnType("longtext");

                    b.Property<string>("ChannelAccessToken")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PageEdgeFeed")
                        .HasColumnType("longtext");

                    b.Property<string>("PageEdgePhotos")
                        .HasColumnType("longtext");

                    b.Property<string>("PostToPagePhotosURL")
                        .HasColumnType("longtext");

                    b.Property<string>("PostToPageURL")
                        .HasColumnType("longtext");

                    b.Property<string>("UserAccessToken")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("FacebookChannel");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.FacebookPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FacebookChannelId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FacebookPostId")
                        .HasColumnType("longtext");

                    b.Property<int>("Formatting")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ObjectId")
                        .HasColumnType("longtext");

                    b.Property<string>("PermalinkUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PublicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<string>("Story")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FacebookChannelId");

                    b.HasIndex("PostId");

                    b.ToTable("FacebookPost");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Caption")
                        .HasColumnType("longtext");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.Channel", b =>
                {
                    b.HasOne("SNS.Facebook.Domain.Entities.Brand", "Brand")
                        .WithMany("SocialChannels")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNS.Facebook.Domain.Entities.ChannelType", "ChannelType")
                        .WithMany()
                        .HasForeignKey("ChannelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ChannelType");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.FacebookChannel", b =>
                {
                    b.HasOne("SNS.Facebook.Domain.Entities.Channel", "SocialChannel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialChannel");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.FacebookPost", b =>
                {
                    b.HasOne("SNS.Facebook.Domain.Entities.FacebookChannel", "FacebookChannel")
                        .WithMany()
                        .HasForeignKey("FacebookChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SNS.Facebook.Domain.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacebookChannel");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SNS.Facebook.Domain.Entities.Brand", b =>
                {
                    b.Navigation("SocialChannels");
                });
#pragma warning restore 612, 618
        }
    }
}
